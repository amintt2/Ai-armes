# .cursorrules - Project Intelligence

## User Role
- The user is the project director with final decision-making authority
- All significant decisions require explicit user approval
- The user determines when a sprint is complete
- The user selects which sprint to work on next
- The user decides on implementation approaches

## Collaboration Framework
- Ask detailed questions before starting any sprint implementation
- Present options with justifications for all significant decisions
- Avoid making assumptions about requirements or approaches
- Work together as partners with the user as the final decision maker
- Provide regular progress updates during implementation
- Seek user validation before considering work complete
- When asking the user questions, use H1 markdown format "# Asking the user" followed by the questions in normal text

## Project Structure Patterns
- Web application code goes in the `web/` directory
- Core autocomplete engine code goes in `app/core/`
- Platform-specific implementations go in `app/platforms/{platform}/`
- Shared utilities go in `utils/`
- Project documentation goes in `memory-bank/`

## Implementation Guidelines
- The core engine should be lightweight and minimally impact system resources
- Platform-specific code should be isolated with a clear abstraction layer
- Web application should follow Next.js best practices
- All code should be thoroughly documented
- Privacy and security are top priorities

## Git Workflow
- Never work directly on the master branch
- Create feature branches for each sprint with descriptive names (`feature/feature-name`)
- Ask for permission before creating branches or executing significant Git operations
- Only merge to master after user validation of working functionality
- Close feature branches after merging to master

## Development Process
- Follow sprint-based approach with user direction
- Complete each sprint before moving to the next one
- Implement one feature/component at a time
- Test platform-specific implementations on actual target platforms
- Follow established naming conventions across the project
- Keep the web application and client applications clearly separated
- Maintain clear interfaces between components

## Known Patterns
- Core engine interfaces should be platform-agnostic
- Platform-specific modules implement these interfaces
- Web application communicates with Supabase for backend functionality
- Client applications sync with Supabase for context data

## Project-Specific Conventions
- Use TypeScript for web development
- Use Rust or C++ for core engine and platform-specific code
- Follow platform-specific guidelines for native code
- Keep memory usage to a minimum in client applications

## Memory Bank Maintenance
- Update all memory bank files when making significant changes
- Ensure activeContext.md reflects current sprint focus
- Keep progress.md updated with completed work and next steps
- Document architecture decisions in systemPatterns.md
- Record technical implementation details in techContext.md

## User Interaction Format
- When asking questions, use "# Asking the user" in H1 markdown format
- Place the actual questions in normal text below the heading
- Wait for user response before proceeding with implementation
- Use this format for all clarifying questions and decision points
- Consider the user as an agent that can be called by using this specific format 